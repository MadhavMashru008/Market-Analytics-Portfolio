src/fetch_prices.py
import os
import time
import pandas as pd
import yfinance as yf
from math import sqrt

TICKERS = ["AAPL", "GS", "JPM", "MSFT", "V"]
PERIOD = "6mo"
INTERVAL = "1d"
ROLL_WINDOW = 20

def engineer_features(df: pd.DataFrame) -> pd.DataFrame:
    df = df.copy()
    df["Daily Return"] = df["Adj Close"].pct_change()
    df["Rolling Volatility"] = df["Daily Return"].rolling(ROLL_WINDOW).std()
    df["Rolling Volatility Ann"] = df["Rolling Volatility"] * sqrt(252)
    df["Volume Change"] = df["Volume"].pct_change()
    return df

def main():
    # Retry/backoff for robustness
    data = None
    for attempt in range(4):
        data = yf.download(
            tickers=TICKERS,
            period=PERIOD,
            interval=INTERVAL,
            group_by="ticker",
            auto_adjust=False,
            threads=True,
            progress=False
        )
        if isinstance(data, pd.DataFrame) and not data.empty:
            break
        time.sleep(3 * (attempt + 1))

    if data is None or data.empty:
        raise RuntimeError("yfinance returned no data after retries")

    frames = []
    for tkr in TICKERS:
        tdf = data[tkr].reset_index()
        tdf = tdf.rename(columns={
            "Date": "date",
            "Open": "open",
            "High": "high",
            "Low": "low",
            "Close": "close",
            "Adj Close": "Adj Close",
            "Volume": "Volume"
        })
        tdf = engineer_features(tdf)
        tdf["Ticker"] = tkr
        frames.append(tdf[[
            "date", "Ticker", "open", "high", "low", "Adj Close", "Volume",
            "Daily Return", "Rolling Volatility", "Rolling Volatility Ann", "Volume Change"
        ]])

    final_df = pd.concat(frames, ignore_index=True).dropna(subset=["Adj Close"])
    out_path = os.path.join(os.getcwd(), "financial_data_ready_for_powerbi.xlsx")
    final_df.to_excel(out_path, index=False)
    print(f"Wrote {out_path}")

if __name__ == "__main__":
    main()
